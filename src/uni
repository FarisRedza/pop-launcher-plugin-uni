#!/usr/bin/env python3

import json
import sys
import os
import subprocess
import difflib

class App(object):
    def __init__(self):
        self.match = None

    # Load the data from the JSON file
    character_file_path = os.path.join(os.path.split(__file__)[0], 'characters.json')
    with open(character_file_path, 'r', encoding='utf-8') as f:
        character_list = json.load(f)

    # Convert the data structure into a list of tuples
    CHARACTERS = [(entry['character'], entry['description']) for entry in character_list]

    def activate(self, index):
        if not self.matches:
            return
        
        with subprocess.Popen(['xclip', '-selection', 'clipboard'], stdin=subprocess.PIPE) as process:
            process.stdin.write(self.matches[int(index)][0].encode())
            process.stdin.close()

        sys.stdout.write('"Close"\n')
        sys.stdout.flush()

    def search_character(self, query):
        data = self.CHARACTERS
        number_of_results = 8
        # Get the closest matches using difflib
        matches = difflib.get_close_matches(query.lower(), [entry[1] for entry in data], n=number_of_results)

        # Find corresponding entries based on matched names
        results = [(entry[0], entry[1]) for entry in data if entry[1].lower() in matches]

        # Sort the results based on similarity scores in descending order
        results.sort(key=lambda x: difflib.SequenceMatcher(None, x[1].lower(), query.lower()).ratio(), reverse=True)

        return results

    def search(self, query):
        query = query.split(' ', 1)[1].lower()
        self.matches = self.search_character(query)
        
        for index, (symbol, description) in enumerate(self.matches):
            sys.stdout.write(json.dumps({
                'Append': {
                    'id': index,
                    'name': symbol,
                    'description': description,
                    'keywords': None,
                    'icon': None,
                    'exec': None,
                    'window': None
                }
            }))
            sys.stdout.write('\n')

        sys.stdout.write('"Finished"\n')
        sys.stdout.flush()

def main():
    app = App()

    for line in sys.stdin:
        try:
            request = json.loads(line)
            if 'Search' in request:
                app.search(request['Search'])
            elif 'Activate' in request:
                app.activate(request['Activate'])
        except json.decoder.JSONDecodeError:
            pass

if __name__ == '__main__':
    main()